#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 6.1 effective-5.10 (swiftlang-6.1.0.110.21 clang-1700.0.13.3)
#ifndef ACIMLIB_SWIFT_H
#define ACIMLIB_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wnon-modular-include-in-framework-module"
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#pragma clang diagnostic pop
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef unsigned char char8_t;
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Dispatch;
@import Foundation;
@import ObjectiveC;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"
#pragma clang diagnostic ignored "-Wunsafe-buffer-usage"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="ACIMLib",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)

@class ACConversation;
@class ACChatMessage;
@class ACError;
/// ~chinese
/// 聊天相关回调的协议类。
/// ~english
/// The chat related callbacks.
SWIFT_PROTOCOL("_TtP7ACIMLib21ACChatManagerDelegate_")
@protocol ACChatManagerDelegate <NSObject>
@optional
/// ~chinese
/// 会话列表发生变化的回调。
/// @param aConversationList  会话列表。 <ACConversation>
/// ~english
/// Occurs when the conversation list changes.
/// @param aConversationList  The conversation NSArray. <ACConversation>
- (void)conversationListDidUpdate:(NSArray<ACConversation *> * _Nonnull)aConversationList;
/// ~chinese
/// 单个会话发生变更的回调。
/// @param aConversationId  发生变更的会话ID。
/// ~english<br/>
/// Occurs when a single conversation is updated.
/// @param aConversationId  The ID of the updated conversation.
- (void)conversationDidUpdate:(NSInteger)aConversationId;
/// ~chinese
/// 会话总未读数变更的回调。
/// ~english
/// Callback when the total unread count of all conversations changes.
- (void)totalUnreadCountDidChange;
/// ~chinese
/// 收到消息的回调。
/// @param aMessages  消息列表。
/// ~english
/// Occurs when the SDK receives new messages.
/// @param aMessages  The received messages. An NSArray of the <ACChatMessage> objects.
- (void)messagesDidReceive:(NSArray<ACChatMessage *> * _Nonnull)aMessages;
/// ~chinese
/// 收到已读回执代理。
/// @param aMessages  已读消息列表。
/// ~english
/// Occurs when receiving read acknowledgement in message list.
/// @param aMessages  The read messages.
- (void)messagesDidRead:(NSArray<ACChatMessage *> * _Nonnull)aMessages;
/// ~chinese
/// 发送方收到消息已送达的回调。
/// @param aMessages  送达消息列表。
/// ~english
/// Occurs when receiving delivered acknowledgement in message list.
/// @param aMessages  The acknowledged message NSArray.
- (void)messagesDidDeliver:(NSArray<ACChatMessage *> * _Nonnull)aMessages;
/// ~chinese
/// 收到消息撤回代理。。
/// @param aRecallMessagesInfo  撤回消息列表。
/// ~english
/// Occurs when a message is recalled.
/// @param aRecallMessagesInfo  The list of recalled messages.
- (void)messagesInfoDidRecall:(NSArray<ACChatMessage *> * _Nonnull)aRecallMessages;
/// ~chinese
/// 消息状态发生变化的回调。消息状态包括消息创建，发送，发送成功，发送失败。
/// 需要给发送消息的 callback 参数传入 nil，此回调才会生效。
/// @param aMessage  状态发生变化的消息。
/// @param aError    出错信息。
/// ~english
/// Occurs when message status has changed. You need to set the parameter as nil.
/// @param aMessage  The message whose status has changed.
/// @param aError    The error information.
- (void)messageStatusDidChange:(ACChatMessage * _Nonnull)aMessage error:(ACError * _Nullable)error;
@end

@class MessageContent;
enum ACMessageDirection : NSInteger;
enum ACChatType : NSInteger;
enum ACMessageStatus : NSInteger;
@class NSString;
@class ACMessageReaction;
/// 聊天消息类
SWIFT_CLASS("_TtC7ACIMLib13ACChatMessage")
@interface ACChatMessage : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithConversationId:(NSInteger)conversationId body:(MessageContent * _Nonnull)body;
/// 初始化消息实例
/// @param conversationId 会话 ID
/// @param from 消息发送方
/// @param to 消息接收方
/// @param body 消息体实例
/// @param ext 扩展信息
- (nonnull instancetype)initWithConversationId:(NSInteger)conversationId from:(NSInteger)from to:(NSInteger)to body:(MessageContent * _Nonnull)body;
/// 消息 ID，是消息的唯一标识
@property (nonatomic, readonly) NSInteger messageId;
/// 会话 ID，是会话的唯一标识
@property (nonatomic, readonly) NSInteger conversationId;
/// 消息类型
@property (nonatomic, readonly) NSInteger type;
/// 消息的方向
@property (nonatomic) enum ACMessageDirection direction;
/// 消息的发送方
@property (nonatomic, readonly) NSInteger from;
/// 消息的接收方
@property (nonatomic, readonly) NSInteger to;
/// 服务器收到该消息的 Unix 时间戳，单位为毫秒
@property (nonatomic) NSInteger timestamp;
/// 客户端发送或收到此消息的时间，单位为毫秒
@property (nonatomic) NSInteger localTime;
/// 聊天类型
@property (nonatomic) enum ACChatType chatType;
/// 消息发送状态
@property (nonatomic) enum ACMessageStatus status;
/// 是否为在线消息
@property (nonatomic, readonly) BOOL onlineState;
/// 是否已发送或收到消息已读回执
@property (nonatomic) BOOL isReadAcked;
/// 是否已发送或收到消息送达回执
@property (nonatomic) BOOL isDeliverAcked;
/// 语音消息是否已播放
@property (nonatomic) BOOL isListened;
/// 消息体
@property (nonatomic, readonly, strong) MessageContent * _Nonnull body;
@property (nonatomic, readonly, copy) NSString * _Nullable bodyRawJsonString;
/// 是否为通知消息
@property (nonatomic, readonly) BOOL isNotificationMessage;
/// Reaction 列表
@property (nonatomic, copy) NSArray<ACMessageReaction *> * _Nullable reactionList;
/// 自定义消息扩展
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nullable ext;
/// 是否为引用回复消息
@property (nonatomic, readonly) BOOL isQuotedReplyMessage;
/// 引用回复原消息
@property (nonatomic, readonly, strong) ACChatMessage * _Nullable quoteMessage;
/// 是否为阅后即焚消息
@property (nonatomic, readonly) BOOL burnAfterReadingFlag;
- (void)updateBody:(MessageContent * _Nonnull)body;
/// 创建临时消息。
/// Creates a temporary message.
+ (ACChatMessage * _Nonnull)createTempMessageWithMsgContent:(MessageContent * _Nonnull)msgContent SWIFT_WARN_UNUSED_RESULT;
@end

/// 聊天类型
typedef SWIFT_ENUM(NSInteger, ACChatType, open) {
  ACChatTypeChat = 0,
  ACChatTypeGroupChat = 1,
  ACChatTypeChatRoom = 2,
};

@protocol IACChatManager;
@protocol IACPushManager;
/// 该类为 SDK 的入口类，负责登录登出及连接管理等，由此可以获得其他模块的入口，例如：群组模块 [ACClient sharedClient].groupManager。
/// This class is the entry of the Chat SDK, which is responsible for management of modules like login, logout, and connection.
/// With this class, you can access other modules such as group [ACClient sharedClient].groupManager.
SWIFT_CLASS("_TtC7ACIMLib8ACClient")
@interface ACClient : NSObject
/// 聊天模块。
/// The chat manager module.
@property (nonatomic, readonly, strong) id <IACChatManager> _Nonnull chatManager;
/// 推送模块。
/// The push manager module.
@property (nonatomic, readonly, strong) id <IACPushManager> _Nonnull pushManager;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Client 类是 chat 的入口，在调用任何其他方法前，需要先调用该方法创建一个 Client 实例。
/// Creates a Client instance. The Client class is the entry to the Chat SDK. You need to call this method to create a Client instance before calling any other methods.
+ (ACClient * _Nonnull)sharedClient SWIFT_WARN_UNUSED_RESULT;
@end

enum ACConnectionState : NSInteger;
@class ACLoginExtensionInfo;
/// ~chinese
/// @header ACClientDelegate.h
/// @abstract 协议提供了与账号登录状态相关的回调。
/// @author MessagerPlus
/// @version 3.00
/// ~english
/// @header ACClientDelegate.h
/// @abstract The protocol provides callbacks related to account login status
/// @author MessagerPlus
/// @version 3.00
SWIFT_PROTOCOL("_TtP7ACIMLib16ACClientDelegate_")
@protocol ACClientDelegate <NSObject>
@optional
/// ~chinese
/// SDK 连接服务器的状态变化时会接收到该回调。
/// SDK 会在以下情况下触发该回调：
/// 1.登录成功后，设备无法上网时。
/// 2.登录成功后，连接状态发生变化时。
/// @param aConnectionState 当前的连接状态。
/// ~english
/// Occurs when the connection state between the SDK and the server changes.
/// The SDK triggers this callback in any of the following situations:
/// <ul>
///   <li>
///     After login, the device is disconnected from the internet.
///   </li>
///   <li>
///     After login, the network status changes.
///   </li>
/// </ul>
/// @param aConnectionState  The current connection state.
- (void)connectionStateDidChange:(enum ACConnectionState)aConnectionState;
/// ~chinese
/// 自动登录完成时的回调。
/// @param aError 错误信息，包含失败原因。
/// ~english
/// Occurs when the auto login is completed.
/// @param aError Error   A description of the issue that caused this call to fail.
- (void)socketReachabilityDidChange:(BOOL)reachable;
/// ~chinese
/// 当前登录账号在其它设备登录时会接收到此回调。
/// @param info 登录设备的设备名称及其扩展信息。
/// ~english
/// Occurs when the current user account is logged in to another device.
/// @param info The device name and extended information of the login device.
- (void)userAccountDidLoginFromOtherDeviceWith:(ACLoginExtensionInfo * _Nullable)info;
/// ~chinese
/// 当前用户账号被禁用时会收到该回调。
/// ~english
/// The delegate method will be invoked when the User account is forbidden.
- (void)userDidForbidByServerWith:(NSInteger)type;
/// ~chinese
/// 当前登录账号被强制退出时会收到该回调，有以下原因：
/// <ul>
///   <li>
///     密码被修改；
///   </li>
///   <li>
///     登录设备数过多；
///   </li>
///   <li>
///     服务被封禁;
///   </li>
///   <li>
///     被强制下线;
///   </li>
/// </ul>
/// ~english
/// The delegate method will be invoked when current IM account is forced to logout with the following reasons:
/// <ol>
///   <li>
///     The password is modified;
///   </li>
///   <li>
///     Logged in too many devices;
///   </li>
///   <li>
///     User for forbidden;
///   </li>
///   <li>
///     Forced offline.
///   </li>
/// </ol>
- (void)userAccountDidForcedToLogoutWith:(ACError * _Nullable)aError;
/// ~chinese
/// token 即将过期
/// ~english
/// token will expire (log in using agoraToken)
- (void)tokenWillExpireWith:(NSInteger)aErrorCode;
/// ~chinese
/// token已经过期
/// ~english
/// token did expire (log in using agoraToken)
- (void)tokenDidExpireWith:(NSInteger)aErrorCode;
/// ~chinese
/// 开始从服务器拉取离线消息时触发。
/// ~english
/// Occurs when the SDK starts pulling offline messages from the server.
- (void)onOfflineMessageSyncStart;
/// ~chinese
/// 从服务器拉取离线消息结束时触发。
/// ~english
/// Occurs when the SDK finishes pulling offline messages from the server.
- (void)onOfflineMessageSyncFinish;
@end

/// ~chinese
/// 网络连接状态。
/// ~english
/// The connection state.
typedef SWIFT_ENUM(NSInteger, ACConnectionState, open) {
  ACConnectionStateConnected = 0,
/// ~chinese 服务器已连接。
/// ~english The SDK is connected to the chat server.
  ACConnectionStateDisconnected = 1,
/// ~chinese 服务器未连接。
/// ~english The SDK is disconnected from the chat server.
  ACConnectionStateUnreachable = 2,
};

/// ~chinese
/// 联系人信息类，用于存储联系人的标题和头像URL。
/// ~english
/// Contact info class for storing contact title and avatar URL.
SWIFT_CLASS("_TtC7ACIMLib13ACContactInfo")
@interface ACContactInfo : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull title;
@property (nonatomic, readonly, copy) NSString * _Nullable avatarUrl;
- (nonnull instancetype)initWithTitle:(NSString * _Nonnull)title avatarUrl:(NSString * _Nullable)avatarUrl OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum ACConversationType : NSInteger;
enum ACPushRemindType : NSInteger;
/// 聊天会话类。
/// Chat conversation class.
SWIFT_CLASS("_TtC7ACIMLib14ACConversation")
@interface ACConversation : NSObject
/// 会话 ID。
/// The conversation ID.
@property (nonatomic, readonly) NSInteger conversationId;
/// 会话类型。
/// The conversation type.
@property (nonatomic, readonly) enum ACConversationType type;
/// 会话中未读取的消息数量。
/// The number of unread messages in the conversation.
@property (nonatomic, readonly) NSInteger unreadMessagesCount;
/// 会话更新时间，可依据这个进行排序
@property (nonatomic, readonly) NSInteger updateTime;
/// 是否为置顶会话。
/// Whether the conversation is pinned.
@property (nonatomic, readonly) BOOL isPinned;
/// 会话中的最新一条消息。
/// The latest message in the conversation.
@property (nonatomic, readonly, strong) ACChatMessage * _Nullable latestMessage;
/// 会话免打扰类型。
/// The conversation no disturb type.
@property (nonatomic, readonly) enum ACPushRemindType disturbType;
/// 会话标题。
/// The conversation title.
@property (nonatomic, readonly, copy) NSString * _Nonnull title;
/// 会话头像缩略图。
/// The conversation small avatar url.
@property (nonatomic, readonly, copy) NSString * _Nullable smallAvatarUrl;
/// 会话是否开启截屏通知。
/// Whether the conversation take screen flag is enabled.
@property (nonatomic, readonly) BOOL takeScreenFlag;
/// 会话是否开启阅后即焚。
/// Whether the conversation burn after reading flag is enabled.
@property (nonatomic, readonly) BOOL burnAfterReadingFlag;
/// 会话阅后即焚时间（单位：秒）。
/// The conversation burn after reading interval (unit: seconds).
@property (nonatomic, readonly) NSInteger burnInterval;
/// 会话是否存在未读的@消息。
/// Whether the conversation has unread @ messages.
@property (nonatomic, readonly) BOOL atFlag;
/// 会话是否存关注的群成员的未读的消息
/// Whether the conversation has unread messages from followed members.
@property (nonatomic, readonly) BOOL hasMsgFromFollowedMember;
/// 会话草稿文本。
/// The conversation draft text.
@property (nonatomic, readonly, copy) NSString * _Nullable draftText;
/// \code
/// * 会话草稿扩展信息。
/// * The conversation draft ext.
///
/// \endcode
@property (nonatomic, readonly, copy) NSString * _Nullable draftExt;
/// 会话消息定时清理时间（单位：毫秒）。
/// The conversation message lifetime (unit: millisecond).
@property (nonatomic, readonly) NSInteger messageLifetime;
/// 会话初始化。
/// The conversation initialization.
- (nonnull instancetype)initWithConversationId:(NSInteger)conversationId OBJC_DESIGNATED_INITIALIZER;
/// 插入一条消息在 SDK 本地数据库。
/// Inserts a message to a conversation in the local database.
- (BOOL)insertMessage:(ACChatMessage * _Nonnull)message error:(NSError * _Nullable * _Nullable)error;
/// 从 SDK 本地数据库和服务器删除一组消息。
/// Deletes a set of message from the local database and server.
- (void)deleteMessagesWithIdList:(NSArray<NSNumber *> * _Nonnull)messageIdList completionHandler:(void (^ _Nonnull)(NSError * _Nullable))completionHandler;
/// 删除阅后即焚消息。
/// Deletes the messages that are burned after reading.
- (void)deleteBurnAfterReadingMessagesWithCompletionHandler:(void (^ _Nonnull)(void))completionHandler;
/// 删除过期消息。
/// Deletes the messages that are expired.
- (void)deleteExpiredMessagesWithCompletionHandler:(void (^ _Nonnull)(void))completionHandler;
/// 删除会话的所有消息。
/// Deletes all messages from the conversation.
- (void)removeAllMessagesFromServerWithCompletionHandler:(void (^ _Nonnull)(NSError * _Nullable))completionHandler;
/// 将 SDK 本地数据库所有未读消息设置为已读。
/// Marks all messages in the local database as read.
- (void)markAllMessagesAsRead;
/// 获取会话中的第一条未读消息。
/// Gets the first unread message in the conversation.
- (ACChatMessage * _Nullable)getFirstUnreadMessage SWIFT_WARN_UNUSED_RESULT;
/// 从 SDK 本地数据库获取指定 ID 的消息。
/// Gets a message with the specified message ID from the local database.
- (ACChatMessage * _Nullable)loadMessageWithId:(NSInteger)messageId SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

SWIFT_CLASS("_TtC7ACIMLib23ACConversationCacheInfo")
@interface ACConversationCacheInfo : NSObject
@property (nonatomic) NSUInteger size;
@property (nonatomic) NSInteger conversationId;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// 会话枚举类型。
/// The conversation types.
typedef SWIFT_ENUM(NSInteger, ACConversationType, open) {
  ACConversationTypeChat = 0,
  ACConversationTypeGroupChat = 1,
  ACConversationTypeChatRoom = 2,
};

/// ~chinese
/// SDK 定义的错误类。
/// ~english
/// The error defined by the SDK.
SWIFT_CLASS("_TtC7ACIMLib7ACError")
@interface ACError : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// ~chinese
/// SDK 定义的错误码枚举。
/// ~english
/// The error code enum defined by the SDK.
typedef SWIFT_ENUM(NSInteger, ACErrorCode, open) {
/// ~chinese 没有错误。 ~english no error
  ACErrorCodeNoError = 0,
/// ~chinese 默认未区分类型的错误。 ~english A general error.
  ACErrorCodeGeneral = 1,
/// ~chinese 网络错误。 ~english The network is unavailable.
  ACErrorCodeNetworkUnavailable = 2,
/// ~chinese 数据库操作失败。 ~english The database operation fails.
  ACErrorCodeDatabaseOperationFailed = 3,
/// ~chinese 超过服务限制。 ~english You have exceeded the service limit.
  ACErrorCodeExceedServiceLimit = 4,
/// ~chinese 推送报错 ~english The push failed.
  ACErrorCodePushReportActionFailed = 5,
/// ~chinese 操作部分成功 ~english The operation succeeds partially.
  ACErrorCodePartialSuccess = 6,
/// ~chinese 不合法的 App Key。 ~english The App key is invalid.
  ACErrorCodeInvalidAppkey = 100,
/// ~chinese 用户 ID 不正确。 ~english The user ID is invalid.
  ACErrorCodeInvalidUsername = 101,
/// ~chinese 用户密码不正确。 ~english The password is invalid.
  ACErrorCodeInvalidPassword = 102,
/// ~chinese URL 无效。 ~english The URL is invalid.
  ACErrorCodeInvalidURL = 103,
/// ~chinese Token 不正确。 ~english The token is invalid.
  ACErrorCodeInvalidToken = 104,
/// ~chinese 用户名过长。 ~english The username is too long.
  ACErrorCodeUsernameTooLong = 105,
/// ~chinese 会话同步未启用。 ~english The channel message synchronization is not enabled.
  ACErrorCodeChannelSyncNotOpen = 106,
/// ~chinese 不正确的会话。 ~english Invalid conversation.
  ACErrorCodeInvalidConversation = 107,
/// ~chinese Token 过期。 ~english The token has expired.
  ACErrorCodeTokenExpire = 108,
/// ~chinese Token 即将过期。 ~english The token will expire.
  ACErrorCodeTokeWillExpire = 109,
/// ~chinese 参数无效。 ~english Parameters are invalid.
  ACErrorCodeInvalidParam = 110,
/// ~chinese 不支持的操作。 ~english The operation is not supported.
  ACErrorCodeOperationUnsupported = 111,
/// ~chinese 查询参数达到限制。 ~english Query parameters have reached the limit.
  ACErrorCodeQueryParamReachesLimit = 112,
/// ~chinese 当前用户已登录。 ~english The user is already logged in.
  ACErrorCodeUserAlreadyLoginSame = 200,
/// ~chinese 用户未登录。 ~english The user is not logged in.
  ACErrorCodeUserNotLogin = 201,
/// ~chinese 用户鉴权失败。 ~english The user authentication fails.
  ACErrorCodeUserAuthenticationFailed = 202,
/// ~chinese 用户已存在。 ~english The user already exists.
  ACErrorCodeUserAlreadyExist = 203,
/// ~chinese 用户不存在。 ~english The user is not found.
  ACErrorCodeUserNotFound = 204,
/// ~chinese 用户参数不正确。 ~english Invalid argument.
  ACErrorCodeUserIllegalArgument = 205,
/// ~chinese 当前用户在其他设备登录。 ~english The user has logged in from another device.
  ACErrorCodeUserLoginOnAnotherDevice = 206,
/// ~chinese 当前用户从服务器端被删掉。 ~english The user was removed from the server.
  ACErrorCodeUserRemoved = 207,
/// ~chinese 用户注册失败。 ~english User registration fails.
  ACErrorCodeUserRegisterFailed = 208,
/// ~chinese 更新推送设置失败。 ~english Fails to configure the Apple push notification.
  ACErrorCodeUpdateApnsConfigsFailed = 209,
/// ~chinese 用户无权限。 ~english The user has no operation permission.
  ACErrorCodeUserPermissionDenied = 210,
/// ~chinese 绑定 device token 失败。 ~english Fails to bind the device token.
  ACErrorCodeUserBindDeviceTokenFailed = 211,
/// ~chinese 解除 device token 失败。 ~english Fails to unbind the user with the device token.
  ACErrorCodeUserUnbindDeviceTokenFailed = 212,
/// ~chinese 用户已与其他设备绑定，无法自动登录。 ~english The user is bound to another device and automatic login is not allowed.
  ACErrorCodeUserBindAnotherDevice = 213,
/// ~chinese 用户登录设备数超过限制。默认可以登录 4 个设备，有特殊需求可以联系商务 sales@agora.io。 ~english The user is logged on too many devices. By default, a user can log in to at most four devices with the same account. To increase this number or disable multi-device login, contact sales@agora.io.
  ACErrorCodeUserLoginTooManyDevices = 214,
/// ~chinese 用户在群组或聊天室中被禁言。 ~english The user is muted in the chat group or chat room.
  ACErrorCodeUserMuted = 215,
/// ~chinese 用户密码更新。 ~english The user has changed the password.
  ACErrorCodeUserKickedByChangePassword = 216,
/// ~chinese 用户被踢下线。 ~english The user is kicked off from another device.
  ACErrorCodeUserKickedByOtherDevice = 217,
/// ~chinese 其他用户已登录。 ~english Another user is already logged in.
  ACErrorCodeUserAlreadyLoginAnother = 218,
/// ~chinese 当前用户被管理员禁言。 ~english The user is muted by the admin.
  ACErrorCodeUserMutedByAdmin = 219,
/// ~chinese 用户设备与上次登录不同，需要重新登录。注意： 默认会允许用户登录，踢掉另一个设备上的登录，此error在打开不踢掉另外设备上的登录开关后才会生效 ~english User device different with last login, need login again
  ACErrorCodeUserDeviceChanged = 220,
/// ~chinese 此用户不是你的好友，不能发送消息 ~english The user is not your friend and therefore cannot send messages.
  ACErrorCodeUserNotOnRoster = 221,
/// ~chinese 请求服务失败。 ~english The server is not reachable.
  ACErrorCodeServerNotReachable = 300,
/// ~chinese 请求服务超时。 ~english The server response times out.
  ACErrorCodeServerTimeout = 301,
/// ~chinese 服务器忙碌。 ~english The server is busy.
  ACErrorCodeServerBusy = 302,
/// ~chinese 服务请求的通用错误码。 ~english An unknown server error occurs.
  ACErrorCodeServerUnknownError = 303,
/// ~chinese 获取服务器配置信息错误。 ~english Fails to retrieve the DNS configurations.
  ACErrorCodeServerGetDNSConfigFailed = 304,
/// ~chinese 当前 app 被禁用。 ~english The service is forbidden.
  ACErrorCodeServerServingForbidden = 305,
/// ~chinese 服务器解密失败。 ~english Server transfer decryption failure.
  ACErrorCodeServerDecryptionFailed = 306,
/// ~chinese 获取rtc配置失败。 ~english Cannot get the RTC configuration.
  ACErrorCodeServerGetRTCConfigFailed = 307,
/// ~chinese 与服务端url不匹配。 ~english Url doesn’t matched with server
  ACErrorCodeServerNoMatchURL = 308,
/// ~chinese 文件未找到。 ~english Cannot find the file.
  ACErrorCodeFileNotFound = 400,
/// ~chinese 文件异常。 ~english The file is invalid.
  ACErrorCodeFileInvalid = 401,
/// ~chinese 上传文件错误。 ~english Fails to upload the file.
  ACErrorCodeFileUploadFailed = 402,
/// ~chinese 下载文件错误。 ~english Fails to download the file.
  ACErrorCodeFileDownloadFailed = 403,
/// ~chinese 删除文件错误。 ~english Fails to delete the file.
  ACErrorCodeFileDeleteFailed = 404,
/// ~chinese 文件太大。 ~english The file is too large.
  ACErrorCodeFileTooLarge = 405,
/// ~chinese 文件内容不合规。 ~english The file contains improper content.
  ACErrorCodeFileContentImproper = 406,
/// ~chinese 文件已过期。 ~english The file is expired.
  ACErrorCodeFileExpired = 407,
/// ~chinese 消息异常错误。 ~english The message is invalid.
  ACErrorCodeMessageInvalid = 500,
/// ~chinese 消息含有非法内容。 ~english The message contains invalid content.
  ACErrorCodeMessageIncludeIllegalContent = 501,
/// ~chinese 消息限流。 ~english Message sending has exceeded the traffic limit.
  ACErrorCodeMessageTrafficLimit = 502,
/// ~chinese 消息加密错误。 ~english An error occurs with message encryption.
  ACErrorCodeMessageEncryption = 503,
/// ~chinese 消息撤回超时错误。 ~english Message recall has exceeded the time limit.
  ACErrorCodeMessageRecallTimeLimit = 504,
/// ~chinese 消息过期。 ~english The message has expired.
  ACErrorCodeMessageExpired = 505,
/// ~chinese 用户未在白名单中无法发送。 ~english The message fails to be delivered because the user is not in the whitelist.
  ACErrorCodeMessageIllegalWhiteList = 506,
/// ~chinese 消息被外部逻辑拦截，无法发送。 ~english The message is blocked by the external logic.
  ACErrorCodeMessageExternalLogicBlocked = 507,
/// ~chinese 消息被限流，发送失败。 ~english The message sending failure by the current limiting.
  ACErrorCodeMessageCurrentLimiting = 508,
/// ~chinese 消息体太大，发送失败。 ~english The message sending failure because the body is too large.
  ACErrorCodeMessageSizeLimit = 509,
/// ~chinese 群组 ID 异常。 ~english The group ID is invalid.
  ACErrorCodeGroupInvalidId = 600,
/// ~chinese 用户已加入该群组。 ~english The user is already in the group.
  ACErrorCodeGroupAlreadyJoined = 601,
/// ~chinese 用户未加入该群组。 ~english The user has not joined the group.
  ACErrorCodeGroupNotJoined = 602,
/// ~chinese 无权限的群组操作。 ~english The user does not have permission to access the operation.
  ACErrorCodeGroupPermissionDenied = 603,
/// ~chinese 群组已满。 ~english The group has reached the maximum member capacity.
  ACErrorCodeGroupMembersFull = 604,
/// ~chinese 共享文件 ID 无效。 ~english The shared file ID is invalid.
  ACErrorCodeGroupSharedFileInvalidId = 605,
/// ~chinese 群组不存在。 ~english The group does not exist.
  ACErrorCodeGroupNotExist = 606,
/// ~chinese 群组被禁用。 ~english The group is disabled.
  ACErrorCodeGroupDisabled = 607,
/// ~chinese 用户在群组黑名单中。 ~english The userId is in group block list.
  ACErrorCodeGroupUserInBlockList = 608,
/// ~chinese Reaction 数量达到上限 ~english The number of Reactions has reached the maximum.
  ACErrorCodeReactionReachLimit = 1300,
/// ~chinese Reaction 重复添加 ~english The Reaction already exists.
  ACErrorCodeReactionHasBeenOperated = 1301,
/// ~chinese Reaction 操作非法 ~english Illegal Reaction operation.
  ACErrorCodeReactionOperationIsIllegal = 1302,
/// ~chinese 当前设备SDK不支持push ~english The current device doesn’t support the push function.
  ACErrorCodeNotSupportPush = 1500,
/// ~chinese push功能绑定账号失败 ~english Failed to bind the account with the push function.
  ACErrorCodePushBindFailed = 1501,
/// ~chinese push功能解除绑定账号失败 ~english The push function failed to unbind the account.
  ACErrorCodePushUnBindFailed = 1502,
};

SWIFT_CLASS("_TtC7ACIMLib13ACFileManager")
@interface ACFileManager : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull msgImageDir;)
+ (NSString * _Nonnull)msgImageDir SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull msgFileDir;)
+ (NSString * _Nonnull)msgFileDir SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)msgMediaFileNameForTarget:(NSInteger)target key:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)getMsgFilePathForTarget:(NSInteger)target key:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)getMsgImagePathForTarget:(NSInteger)target key:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)getTmpMediaForKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// ~chinese
/// 群成员信息类，用于存储群成员的名称和头像URL。
/// ~english
/// Group member info class for storing group member name and avatar URL.
SWIFT_CLASS("_TtC7ACIMLib17ACGroupMemberInfo")
@interface ACGroupMemberInfo : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
@property (nonatomic, readonly, copy) NSString * _Nullable avatarUrl;
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name avatarUrl:(NSString * _Nullable)avatarUrl OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

SWIFT_PROTOCOL("_TtP7ACIMLib17ACGroupMessageAck_")
@protocol ACGroupMessageAck
@end

SWIFT_CLASS("_TtC7ACIMLib20ACLoginExtensionInfo")
@interface ACLoginExtensionInfo : NSObject
/// 设备名称。
@property (nonatomic, copy) NSString * _Nonnull deviceName;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// 消息方向类型
typedef SWIFT_ENUM(NSInteger, ACMessageDirection, open) {
  ACMessageDirectionSend = 0,
  ACMessageDirectionReceive = 1,
};

/// ~chinese
/// 漫游消息的拉取方向枚举类型。
/// ~english
/// The directions in which historical messages are retrieved from the server.
typedef SWIFT_ENUM(NSUInteger, ACMessageFetchHistoryDirection, open) {
  ACMessageFetchHistoryDirectionUp = 0,
/// ~chinese SDK 按消息中的时间戳的逆序查询。  ~english The SDK retrieves messages in the descending order of the timestamp included in them.
  ACMessageFetchHistoryDirectionDown = 1,
};

/// 消息Reaction类。
/// The message reaction object.
SWIFT_CLASS("_TtC7ACIMLib17ACMessageReaction")
@interface ACMessageReaction : NSObject
/// Reaction 内容。
/// The Reaction content.
@property (nonatomic, readonly, copy) NSString * _Nonnull reaction;
/// 添加该 Reaction 的用户总数。
/// The count of the users who added this Reaction.
@property (nonatomic, readonly) NSUInteger count;
/// 当前用户是否添加了该 Reaction。
/// <ul>
///   <li>
///     <code>true</code>: 是；
///   </li>
///   <li>
///     <code>false</code>: 否。
///   </li>
/// </ul>
/// Whether the current user added this Reaction.
/// <ul>
///   <li>
///     <code>true</code>: Yes;
///   </li>
///   <li>
///     <code>false</code>: No.
///   </li>
/// </ul>
@property (nonatomic, readonly) BOOL isAddedBySelf;
/// 添加了指定 Reaction 的用户列表。
/// <em>Note</em>
/// 只有通过 {@link #getReactionDetail(IEMChatManager)} 接口获取的是全部用户的分页数据；其他相关接口如 {@link #reactionList(EMChatMessage)}、{link #getReactionList(IEMChatManager)} 或者 {@link messageReactionDidChange(EMChatManagerDelegate)} 等都只包含前三个用户。
/// The list of users that added this Reaction.
/// <em>Note</em>
/// To get the entire list of users adding this Reaction, you can call {@link #getReactionDetail(IEMChatManager)} which returns the user list with pagination. Other methods like {@link #reactionList(EMChatMessage)}, {@link #getReactionList(IEMChatManager)} or {@link messageReactionDidChange(EMChatManagerDelegate)} can get the first three users.
@property (nonatomic, readonly, copy) NSArray<NSNumber *> * _Nonnull userList;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// 消息发送状态
typedef SWIFT_ENUM(NSInteger, ACMessageStatus, open) {
  ACMessageStatusPending = 0,
  ACMessageStatusDelivering = 1,
  ACMessageStatusSucceed = 2,
  ACMessageStatusFailed = 3,
};

/// SDK 的设置选项。
/// The SDK options.
SWIFT_CLASS("_TtC7ACIMLib9ACOptions")
@interface ACOptions : NSObject
/// 获取 SDK 选项实例。
/// @param appkey  App key。
/// @return SDK 设置项实例。
/// Gets an SDK options instance.
/// @param appkey  The App Key.
/// @return  The SDK options instance.
+ (ACOptions * _Nonnull)optionsWithAppkey:(NSString * _Nonnull)appkey SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// ~chinese
/// 离线推送的提醒类型。
/// ~english
/// The remind type of push message.
typedef SWIFT_ENUM(NSInteger, ACPushRemindType, open) {
/// ~chinese
/// 所有消息都提醒。
/// ~english
/// All messages are remind.
  ACPushRemindTypeAll = 0,
/// ~chinese
/// 所有消息都不提醒。
/// ~english
/// All messages are not remind.
  ACPushRemindTypeNone = 2,
};

/// ~chinese
/// 消息免打扰配置的结果类
/// ~english
/// The silent message result object
SWIFT_CLASS("_TtC7ACIMLib18ACSilentModeResult")
@interface ACSilentModeResult : NSObject
/// ~chinese
/// 离线推送提醒类型。
/// ~english
/// The remind type for push messages.
@property (nonatomic, readonly) enum ACPushRemindType remindType;
/// ~chinese
/// 会话ID。
/// ~english
/// The conversation ID.
@property (nonatomic, readonly) NSInteger conversationID;
/// ~chinese
/// 会话类型。
/// ~english
/// The conversation type.
@property (nonatomic, readonly) enum ACConversationType conversationType;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

SWIFT_CLASS("_TtC7ACIMLib11ACStsConfig")
@interface ACStsConfig : NSObject
@property (nonatomic, copy) NSString * _Nonnull accessKeyID;
@property (nonatomic, copy) NSString * _Nonnull accessKeySecret;
@property (nonatomic, copy) NSString * _Nonnull securityToken;
@property (nonatomic, copy) NSString * _Nonnull endpoint;
@property (nonatomic, copy) NSString * _Nonnull baseFile;
@property (nonatomic, copy) NSString * _Nonnull chatFile;
@property (nonatomic) BOOL main;
@property (nonatomic, copy) NSString * _Nonnull ossSource;
@property (nonatomic) BOOL avatarEncrypt;
@property (nonatomic) NSInteger expiration;
@property (nonatomic, copy) NSString * _Nonnull expireTime;
- (nonnull instancetype)initWithAccessKeyID:(NSString * _Nonnull)accessKeyID accessKeySecret:(NSString * _Nonnull)accessKeySecret securityToken:(NSString * _Nonnull)securityToken endpoint:(NSString * _Nonnull)endpoint baseFile:(NSString * _Nonnull)baseFile chatFile:(NSString * _Nonnull)chatFile main:(BOOL)main ossSource:(NSString * _Nonnull)ossSource avatarEncrypt:(BOOL)avatarEncrypt expiration:(NSInteger)expiration expireTime:(NSString * _Nonnull)expireTime OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

SWIFT_CLASS("_TtC7ACIMLib9AliYunOss")
@interface AliYunOss : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

SWIFT_CLASS("_TtC7ACIMLib6AtInfo")
@interface AtInfo : NSObject
@property (nonatomic) NSInteger uin;
@property (nonatomic, copy) NSString * _Nonnull nickname;
- (NSString * _Nonnull)getMemtionFullString SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

enum MessagePersistent : NSInteger;
SWIFT_PROTOCOL("_TtP7ACIMLib27MessagePersistentCompatible_")
@protocol MessagePersistentCompatible <NSObject>
+ (enum MessagePersistent)persistentFlag SWIFT_WARN_UNUSED_RESULT;
@end

SWIFT_CLASS("_TtC7ACIMLib14MessageContent")
@interface MessageContent : NSObject <MessagePersistentCompatible>
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (NSString * _Nullable)getContentBriefText SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)getSearchableWords SWIFT_WARN_UNUSED_RESULT;
+ (NSInteger)getConstructor SWIFT_WARN_UNUSED_RESULT;
+ (enum MessagePersistent)persistentFlag SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)mediaFlag SWIFT_WARN_UNUSED_RESULT;
@end

SWIFT_CLASS("_TtC7ACIMLib19MediaMessageContent")
@interface MediaMessageContent : MessageContent
- (NSArray<NSString *> * _Nonnull)getImageKeys SWIFT_WARN_UNUSED_RESULT;
- (NSArray<NSString *> * _Nonnull)getFileKeys SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

SWIFT_CLASS("_TtC7ACIMLib12AudioMessage")
@interface AudioMessage : MediaMessageContent
@property (nonatomic, copy) NSString * _Nonnull audioObjectKey;
@property (nonatomic, copy) NSString * _Nonnull extension;
@property (nonatomic, copy) NSString * _Nullable encryptKey;
@property (nonatomic) NSInteger length;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithLocalPath:(NSString * _Nonnull)localPath OBJC_DESIGNATED_INITIALIZER;
+ (enum MessagePersistent)persistentFlag SWIFT_WARN_UNUSED_RESULT;
+ (NSInteger)getConstructor SWIFT_WARN_UNUSED_RESULT;
- (NSArray<NSString *> * _Nonnull)getFileKeys SWIFT_WARN_UNUSED_RESULT;
@end

SWIFT_CLASS("_TtC7ACIMLib19NotificationMessage")
@interface NotificationMessage : MessageContent
- (void)processForMessageWithMessage:(ACChatMessage * _Nonnull)message;
+ (enum MessagePersistent)persistentFlag SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)mediaFlag SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

SWIFT_CLASS("_TtC7ACIMLib35BurnAfterReadingNotificationMessage")
@interface BurnAfterReadingNotificationMessage : NotificationMessage
@property (nonatomic) NSInteger templateId;
@property (nonatomic) NSInteger burnAfterReadingTime;
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull params;
@property (nonatomic) NSInteger operatorUserId;
@property (nonatomic) NSInteger groupUin;
@property (nonatomic) NSInteger destUin;
+ (enum MessagePersistent)persistentFlag SWIFT_WARN_UNUSED_RESULT;
- (void)processForMessageWithMessage:(ACChatMessage * _Nonnull)message;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

SWIFT_CLASS("_TtC7ACIMLib10ChatConfig")
@interface ChatConfig : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger maxGroupMemberCount;)
+ (NSInteger)maxGroupMemberCount SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

enum ChatTextStyleAttributeType : NSInteger;
SWIFT_CLASS("_TtC7ACIMLib22ChatTextStyleAttribute")
@interface ChatTextStyleAttribute : NSObject
@property (nonatomic) enum ChatTextStyleAttributeType type;
@property (nonatomic) NSInteger location;
@property (nonatomic) NSInteger length;
- (NSRange)range SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithType:(enum ChatTextStyleAttributeType)type range:(NSRange)range OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, ChatTextStyleAttributeType, open) {
  ChatTextStyleAttributeTypeSpoiler = 0,
};

@class CombineMessageItemSummary;
SWIFT_CLASS("_TtC7ACIMLib14CombineMessage")
@interface CombineMessage : MediaMessageContent
@property (nonatomic, copy) NSString * _Nonnull chatTitle;
@property (nonatomic, copy) NSString * _Nonnull msgDataFileKey;
@property (nonatomic, copy) NSArray<CombineMessageItemSummary *> * _Nonnull msgList;
@property (nonatomic, copy) NSString * _Nullable encryptKey;
@property (nonatomic, copy) NSString * _Nullable oldMsgDataFileKey;
- (nonnull instancetype)initWithChatTitle:(NSString * _Nonnull)chatTitle messageIdList:(NSArray<NSNumber *> * _Nonnull)messageIdList OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
+ (enum MessagePersistent)persistentFlag SWIFT_WARN_UNUSED_RESULT;
+ (NSInteger)getConstructor SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)getEncryptKey SWIFT_WARN_UNUSED_RESULT;
- (NSArray<NSString *> * _Nonnull)getFileKeys SWIFT_WARN_UNUSED_RESULT;
@end

SWIFT_CLASS("_TtC7ACIMLib25CombineMessageItemSummary")
@interface CombineMessageItemSummary : NSObject
@property (nonatomic) NSInteger from;
@property (nonatomic, copy) NSString * _Nonnull senderNickname;
@property (nonatomic) NSInteger messageType;
@property (nonatomic, copy) NSString * _Nonnull briefText;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

SWIFT_CLASS("_TtC7ACIMLib14ContactMessage")
@interface ContactMessage : MessageContent
@property (nonatomic) NSInteger uid;
@property (nonatomic, copy) NSString * _Nonnull nickname;
@property (nonatomic, copy) NSString * _Nullable phoneNumber;
@property (nonatomic, copy) NSString * _Nullable langcode;
@property (nonatomic, copy) NSString * _Nullable smallAvatarUrl;
@property (nonatomic) NSInteger gender;
+ (enum MessagePersistent)persistentFlag SWIFT_WARN_UNUSED_RESULT;
+ (NSInteger)getConstructor SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

SWIFT_CLASS("_TtC7ACIMLib17FileDownloadCache")
@interface FileDownloadCache : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FileDownloadCache * _Nonnull shared;)
+ (FileDownloadCache * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (BOOL)isFileNoExistsForKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
@end

@class NSURL;
@class NSData;
SWIFT_CLASS("_TtC7ACIMLib14FileDownloader")
@interface FileDownloader : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FileDownloader * _Nonnull shared;)
+ (FileDownloader * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (void)downloadChatFileWithKey:(NSString * _Nonnull)key encryptKey:(NSString * _Nullable)encryptKey destination:(NSURL * _Nullable)destination ignoreCache:(BOOL)ignoreCache completionHandler:(void (^ _Nonnull)(NSData * _Nullable, NSError * _Nullable))completionHandler;
- (BOOL)isDownloading:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
@end

SWIFT_CLASS("_TtC7ACIMLib11FileMessage")
@interface FileMessage : MediaMessageContent
@property (nonatomic, copy) NSString * _Nonnull fileKey;
@property (nonatomic, copy) NSString * _Nonnull title;
@property (nonatomic, copy) NSString * _Nullable extension;
@property (nonatomic) NSInteger size;
@property (nonatomic, copy) NSString * _Nonnull encryptKey;
@property (nonatomic, copy) NSString * _Nullable oldFileKey;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithFileUrl:(NSURL * _Nonnull)fileUrl OBJC_DESIGNATED_INITIALIZER;
- (NSString * _Nonnull)getFileName SWIFT_WARN_UNUSED_RESULT;
+ (enum MessagePersistent)persistentFlag SWIFT_WARN_UNUSED_RESULT;
+ (NSInteger)getConstructor SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)getSearchableWords SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)getEncryptKey SWIFT_WARN_UNUSED_RESULT;
- (NSArray<NSString *> * _Nonnull)getFileKeys SWIFT_WARN_UNUSED_RESULT;
@end

SWIFT_CLASS("_TtC7ACIMLib10GIFMessage")
@interface GIFMessage : MediaMessageContent
@property (nonatomic, copy) NSString * _Nonnull originalObjectKey;
@property (nonatomic, copy) NSString * _Nonnull extension;
@property (nonatomic) NSInteger width;
@property (nonatomic) NSInteger height;
@property (nonatomic, copy) NSString * _Nullable encryptKey;
@property (nonatomic, copy) NSString * _Nullable oldOriginalObjectKey;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithData:(NSData * _Nonnull)data OBJC_DESIGNATED_INITIALIZER;
+ (enum MessagePersistent)persistentFlag SWIFT_WARN_UNUSED_RESULT;
+ (NSInteger)getConstructor SWIFT_WARN_UNUSED_RESULT;
- (NSArray<NSString *> * _Nonnull)getImageKeys SWIFT_WARN_UNUSED_RESULT;
@end

/// ~chinese
/// 聊天相关操作代理协议。
/// 消息都是从本地数据库中加载，不是从服务端加载。
/// ~english
/// This protocol that defines the operations of chat.
/// Messages are loaded from the local database, not from the server.
SWIFT_PROTOCOL("_TtP7ACIMLib14IACChatManager_")
@protocol IACChatManager <NSObject>
/// ~chinese
/// 添加回调代理。
/// @param aDelegate  实现代理协议的对象。
/// @param aQueue     执行代理方法的队列。若在主线程上运行 app，将该参数设置为空。
/// ~english
/// Adds a delegate.
/// @param aDelegate  The object that implements the protocol.
/// @param aQueue     (optional) The queue of calling delegate methods. If you want to run the app on the main thread, set this parameter as nil.
- (void)addDelegate:(id <ACChatManagerDelegate> _Nonnull)aDelegate delegateQueue:(dispatch_queue_t _Nullable)delegateQueue;
/// ~chinese
/// 移除回调代理。
/// @param aDelegate  要移除的代理。
/// ~english
/// Removes a delegate.
/// @param aDelegate  The delegate to be removed.
- (void)removeDelegate:(id <ACChatManagerDelegate> _Nonnull)aDelegate;
/// ~chinese
/// 获取本地所有会话。
/// 该方法会先从内存中获取，如果未找到任何会话，从本地数据库获取。
/// @result 会话列表，NSArray<ACConversation *> * 类型。
/// ~english
/// Gets all local conversations.
/// The SDK loads the conversations from the memory first. If no conversation is found in the memory, the SDK loads from the local database.
/// @result The conversation list of the NSArray<ACConversation *> * type.
- (NSArray<ACConversation *> * _Nonnull)getAllConversations SWIFT_WARN_UNUSED_RESULT;
/// ~chinese
/// 清除本地内存中的所有会话释放内存。
/// ~english
/// Clear all conversations in memory to release memory.
- (void)cleanConversationsMemoryCache;
/// ~chinese
/// 获取本地所有会话。
/// 该方法会先从内存中获取，如果未找到任何会话，SDK 从本地数据库获取。
/// @param isSort 是否对会话排序。
/// - YES: YES。SDK 按照最近一条消息的时间戳的倒序返回会话，置顶会话在前，非置顶会话在后。
/// - NO: NO
/// @result 会话列表，NSArray<ACConversation *> * 类型。
/// ~english
/// Gets all local conversations.
/// The SDK loads the conversations from the memory first. If there is no conversation is in the memory, the SDK loads from the local database.
/// @param isSort Whether to sort the conversations.
/// - YES: Yes. The SDK returns conversations in the descending order of the timestamp of the latest message in them, with the pinned ones at the top of the list and followed by the unpinned ones.
/// - NO: No.
/// @result The conversation list of the NSArray<ACConversation *> * type.
- (NSArray<ACConversation *> * _Nonnull)getAllConversationsWithIsSort:(BOOL)isSort SWIFT_WARN_UNUSED_RESULT;
/// ~chinese
/// 从服务器获取一个会话。
/// ~english
/// Gets a conversation from the server.
- (void)getConversationFromServer:(NSInteger)conversationId completionHandler:(void (^ _Nonnull)(ACConversation * _Nullable, NSError * _Nullable))completionHandler;
/// ~chinese
/// 设置是否置顶会话。
/// @param conversationId 会话 ID。
/// @param isPinned 是否置顶会话：
/// - YES：置顶；
/// - NO：取消置顶。
/// @param callback 设置是否置顶会话的结果回调。
/// ~english
/// Sets whether to pin a conversation.
/// @param conversationId  The conversation ID.
/// @param isPinned Whether to pin a conversation:
/// - <code>true</code>：Yes.
/// - <code>false</code>: No. The conversation is unpinned.
/// @param completionBlock     The completion block, which contains the error message if the method fails.
- (void)pinConversation:(NSInteger)conversationId isPinned:(BOOL)isPinned completionHandler:(void (^ _Nonnull)(NSError * _Nullable))completionHandler;
/// ~chinese
/// 设置是否屏蔽会话。
/// ~english
/// Sets whether to block a conversation.
- (void)blockConversation:(NSInteger)conversationId blocked:(BOOL)blocked;
/// \code
/// *  \~chinese
/// *  设置是否开启截屏通知。
/// *
/// *  \~english
/// *  Sets whether to enable screenshot notification.
///
/// \endcode
- (void)setConversationScreenshotFlag:(NSInteger)conversationId isEnabled:(BOOL)isEnabled isUpdateServerConfig:(BOOL)isUpdateServerConfig completionHandler:(void (^ _Nonnull)(NSError * _Nullable))completionHandler;
/// ~chinese
/// 设置是否开启阅后即焚。
/// ~english
/// Sets whether to enable burn after reading.
- (void)setConversationBurnAfterReading:(NSInteger)conversationId isEnabled:(BOOL)isEnabled interval:(NSInteger)interval isUpdateServerConfig:(BOOL)isUpdateServerConfig completionHandler:(void (^ _Nonnull)(NSError * _Nullable))completionHandler;
/// ~chinese
/// 设置会话草稿。
/// ~english
/// Sets the conversation draft.
- (void)setConversationDraft:(NSInteger)conversationId draftText:(NSString * _Nullable)draftText ext:(NSString * _Nullable)ext;
/// ~chinese
/// 开启或关闭群消息定时清理功能。
/// @param conversationId 会话ID。
/// @param isEnabled 是否开启定时清理。
/// ~english
/// Enable or disable scheduled message cleanup.
/// @param conversationId Conversation ID.
/// @param isEnabled Whether to enable scheduled cleanup.
- (void)setGroupConversationScheduledCleanup:(NSInteger)conversationId isEnabled:(BOOL)isEnabled completionHandler:(void (^ _Nonnull)(NSError * _Nullable))completionHandler;
/// ~chinese
/// 同步会话总未读数到服务端
/// ~english
/// Sync total unread count of all conversations to server
- (void)syncTotalUnreadCountToServerWithCompletionHandler:(void (^ _Nonnull)(NSError * _Nullable))completionHandler;
/// ~chinese
/// 从本地数据库中获取一个已存在的会话。
/// @param aConversationId  会话 ID。
/// @result 会话对象。
/// ~english
/// Gets a conversation from the local database.
/// @param aConversationId  The conversation ID.
/// @result The conversation object.
- (ACConversation * _Nullable)getConversationWithConvId:(NSInteger)aConversationId SWIFT_WARN_UNUSED_RESULT;
/// ~chinese
/// 获取一个会话。
/// @param aConversationId  会话 ID。
/// @param aType            会话类型。
/// @param aIfCreate        若该会话不存在是否创建：
/// - <code>YES</code>：是；
/// - <code>NO</code>：否。
/// @result 会话对象。
/// ~english
/// Gets a conversation from the local database.
/// @param aConversationId  The conversation ID.
/// @param aType            The conversation type.
/// @param aIfCreate        Whether to create the conversation if it does not exist:
/// - <code>YES</code>: Yes;
/// - <code>NO</code>: No.
/// @result The conversation object.
- (ACConversation * _Nullable)getConversation:(NSInteger)aConversationId type:(enum ACConversationType)type createIfNotExist:(BOOL)createIfNotExist SWIFT_WARN_UNUSED_RESULT;
/// ~chinese
/// 从本地数据库中删除一个会话。
/// @param aConversationId      会话 ID。
/// @param aIsDeleteMessages    是否删除会话中的消息。
/// <ul>
///   <li>
///     <code>YES</code>: 是；
///   </li>
///   <li>
///     <code>NO</code>: 否。
///     @param aCompletionBlock     该方法完成调用的回调。如果该方法调用失败，会包含调用失败的原因。
///   </li>
/// </ul>
/// ~english
/// Deletes a conversation from the local database.
/// @param aConversationId      The conversation ID.
/// @param aIsDeleteMessages    Whether to delete the messages in the conversation.
/// <ul>
///   <li>
///     <code>YES</code>: Yes;
///   </li>
///   <li>
///     <code>NO</code>: No.
///     @param aCompletionBlock     The completion block, which contains the error message if the method call fails.
///   </li>
/// </ul>
- (void)deleteConversation:(NSInteger)aConversationId isDeleteMessages:(BOOL)isDeleteMessages completionHandler:(void (^ _Nonnull)(NSError * _Nullable))completionHandler;
/// ~chinese
/// 删除一组会话。
/// @param aConversations       会话列表。
/// @param aIsDeleteMessages    是否删除会话中的消息。
/// <ul>
///   <li>
///     <code>YES</code>: 是；
///   </li>
///   <li>
///     <code>NO</code>: 否。
///     @param aCompletionBlock     该方法完成调用的回调。如果该方法调用失败，会包含调用失败的原因。
///   </li>
/// </ul>
/// ~english
/// Deletes multiple conversations.
/// @param aConversations       The conversation list.
/// @param aIsDeleteMessages    Whether to delete the messages with the conversations.
/// <ul>
///   <li>
///     <code>YES</code>: Yes;
///   </li>
///   <li>
///     <code>NO</code>: No.
///     @param aCompletionBlock     The completion block, which contains the error message if the method fails.
///   </li>
/// </ul>
- (void)deleteConversations:(NSArray<ACConversation *> * _Nonnull)aConversations isDeleteMessages:(BOOL)isDeleteMessages completionHandler:(void (^ _Nonnull)(NSError * _Nullable))completionHandler;
/// ~chinese
/// 设置获取联系人信息的回调方法。
/// @param provider   获取联系人信息的闭包，参数为会话类型和会话ID，返回联系人标题和头像URL。
/// ~english
/// Set the callback to get contact information.
/// @param provider   The closure to get contact info, parameters are conversation type and conversation ID, returns contact title and avatar URL.
/// ~chinese
/// 设置获取联系人信息的回调方法。
/// @param provider   获取联系人信息的闭包，参数为会话类型和会话ID，返回联系人标题和头像URL。
/// ~english
/// Set the callback to get contact information.
/// @param provider   The closure to get contact info, parameters are conversation type and conversation ID, returns contact title and avatar URL.
- (void)setContactInfoProvider:(ACContactInfo * _Nullable (^ _Nonnull)(enum ACConversationType, NSInteger))provider;
/// ~chinese
/// 设置获取群成员信息的回调方法。
/// ~english
/// Set the callback to get group member information.
- (void)setGroupMemberInfoProvider:(ACGroupMemberInfo * _Nullable (^ _Nonnull)(NSInteger, NSInteger))provider;
/// ~chinese
/// 设置获取 OSS 配置信息的异步回调方法，返回 ACStsConfig 数组。
/// @param provider   获取 OSS 配置信息的异步闭包，返回 ACStsConfig 数组。
/// ~english
/// Set the async callback to get OSS config information, returns an array of ACStsConfig.
/// @param provider   The async closure to get OSS config, returns an array of ACStsConfig.
- (void)setOSSConfigProvider:(void (^ _Nonnull)(void (^ _Nonnull)(NSArray<ACStsConfig *> * _Nullable)))provider;
/// \code
/// *  \~chinese
/// *  刷新会话信息。
/// *
/// *  \~english
/// *  Refreshes the conversation information.
///
/// \endcode
- (void)refreshConversationInfoWithConversationId:(NSInteger)aConversationId;
/// \code
/// *  \~chinese
/// *  记录会话截屏。
/// *
/// *  \~english
/// *  Records the screenshot of a conversation.
///
/// \endcode
- (void)recordConversationTakeScreenWithConversationId:(NSInteger)aConversationId completionHandler:(void (^ _Nonnull)(NSError * _Nullable))completionHandler;
/// ~chinese
/// 注册自定义消息类型。
/// @param messageClass   消息类。
/// ~english
/// Registers a custom message type.
/// @param messageClass   The message class.
- (void)registerMessageType:(Class _Nonnull)messageClass;
/// ~chinese
/// 获取指定的消息。
/// @param  aMessageId   消息 ID。
/// @result   获取到的消息。
/// ~english
/// Gets the specified message.
/// @param aMessageId    The message ID.
/// @result ACChatMessage     The message content.
- (ACChatMessage * _Nullable)getMessageWithMessageId:(NSInteger)aMessageId SWIFT_WARN_UNUSED_RESULT;
/// ~chinese
/// 更新消息到本地数据库。
/// 该方法会同时更新本地内存和数据库中的消息，消息 ID 不会更新。
/// @param aMessage         消息。
/// @param aCompletionBlock 该方法完成调用的回调。如果该方法调用失败，会包含调用失败的原因。
/// ~english
/// Updates a message in the local database.
/// This method updates the message in both the memory and the local database at the same time.
/// The message ID cannot be updated.
/// @param aMessage             The message instance.
/// @param aCompletionBlock     The completion block, which contains the error message if the method fails.
- (BOOL)updateMessage:(ACChatMessage * _Nonnull)aMessage error:(NSError * _Nullable * _Nullable)error;
/// ~chinese
/// 发送消息已读回执。
/// 异步方法。
/// @param aMessage             消息 ID。
/// @param aUsername            已读回执的接收方。
/// @param aCompletionBlock     该方法完成调用的回调。如果该方法调用失败，会包含调用失败的原因。
/// ~english
/// Sends the read receipt for a message.
/// This is an asynchronous method.
/// @param aMessageId           The message ID.
/// @param aUsername            The user ID of the recipient of the read receipt.
/// @param aCompletionBlock     The completion block, which contains the error message if the method fails.
- (void)sendMessageReadAck:(NSArray<NSNumber *> * _Nonnull)aMessageIdList;
/// ~chinese
/// 撤回一条消息。
/// 异步方法。
/// @param aMessageId           消息 ID。
/// @param aCompletionBlock     该方法完成调用的回调。如果该方法调用失败，会包含调用失败的原因。
/// ~english
/// Recalls a message.
/// This is an asynchronous method.
/// @param aMessageId           The message ID
/// @param aCompletionBlock     The completion block, which contains the error message if the method fails.
- (void)recallMessageWithMessageId:(NSInteger)aMessageId completionHandler:(void (^ _Nonnull)(NSError * _Nullable))completionHandler;
/// ~chinese
/// 发送消息。
/// 异步方法。
/// @param aMessage         消息。
/// @param aProgressBlock   附件上传进度回调 block。进度值范围为 [0,100]。
/// @param aCompletionBlock 该方法完成调用的回调。如果该方法调用失败，会包含调用失败的原因。
/// ~english
/// Sends a message.
/// This is an asynchronous method.
/// @param aMessage             The message instance.
/// @param aProgressBlock       The callback block of attachment upload progress. The progress value range is [0,100].
/// @param aCompletionBlock     The completion block, which contains the error message if the method fails.
- (ACChatMessage * _Nullable)sendMessage:(ACChatMessage * _Nonnull)aMessage progress:(void (^ _Nullable)(NSInteger))progress completion:(void (^ _Nullable)(ACChatMessage * _Nullable, ACError * _Nullable))completion;
/// 发送引用回复消息
/// *  ~chinese
/// *  发送引用回复消息。
/// *
/// *  ~english
/// *  Sends a quoted message.
- (ACChatMessage * _Nullable)sendQuotedMessage:(ACChatMessage * _Nonnull)aMessage quotedMessageId:(NSInteger)quotedMessageId completion:(void (^ _Nullable)(ACChatMessage * _Nullable, ACError * _Nullable))completion;
/// ~chinese
/// 重新发送消息。
/// @param aMessage         消息对象。
/// @param aProgressBlock   附件上传进度回调 block。进度值范围为 [0,100]。
/// @param aCompletionBlock 该方法完成调用的回调。如果该方法调用失败，会包含调用失败的原因。
/// ~english
/// Resends a message.
/// @param aMessage             The message object.
/// @param aProgressBlock       The callback block of attachment upload progress. The progress value range is [0,100].
/// @param aCompletionBlock     The completion block, which contains the error message if the method fails.
- (ACChatMessage * _Nullable)resendMessage:(ACChatMessage * _Nonnull)aMessage progress:(void (^ _Nullable)(NSInteger))progress completion:(void (^ _Nullable)(ACChatMessage * _Nullable, ACError * _Nullable))completion;
/// \code
/// *  \~chinese
/// *  转发消息。
/// *
/// *  \~english
/// *  Forwards a message.
///
/// \endcode
- (ACChatMessage * _Nullable)forwardMessage:(ACChatMessage * _Nonnull)originalMessage toConversation:(NSInteger)conversationId progress:(void (^ _Nullable)(NSInteger))progress completion:(void (^ _Nullable)(ACChatMessage * _Nullable, ACError * _Nullable))completion;
/// ~chinese
/// 下载并解析合并消息中的附件。
/// 异步方法。
/// @param aMessage            合并消息对象。
/// @param aCompletionBlock    该方法完成调用的回调。如果该方法调用失败，会包含调用失败的原因。
/// ~english
/// Download and parse the attachment in a combined message.
/// This is an asynchronous method.
/// @param aMessage            The combined message object.
/// @param aCompletionBlock    The completion block, which contains the error message if the method fails.
- (void)downloadAndParseCombineMessage:(ACChatMessage * _Nonnull)aMessage completionHandler:(void (^ _Nonnull)(NSArray<ACChatMessage *> * _Nullable, NSError * _Nullable))completionHandler;
/// ~chinese
/// 添加 Reaction。
/// @param reaction  Reaction 内容。
/// @param messageId  消息 ID。
/// @param completion  该方法完成的回调。如果有错误会包含错误信息。
/// ~english
/// Adds a Reaction.
/// @param reaction  The Reaction content.
/// @param messageId  The message ID.
/// @param completion  The completion block which contains the error code and error information if the method fails.
- (void)addReaction:(NSString * _Nonnull)reaction toMessage:(NSInteger)messageId completionHandler:(void (^ _Nonnull)(NSError * _Nullable))completionHandler;
/// ~chinese
/// 删除 Reaction。
/// @param reaction  Reaction 内容。
/// @param messageId  消息 ID。
/// @param completion  该方法完成的回调。如果有错误会包含错误信息。
/// ~english
/// Removes a Reaction.
/// @param reaction  The Reaction content.
/// @param messageId  The message ID.
/// @param completion  The completion block which contains the error code and error information if the method fails.
- (void)removeReactionFromMessage:(NSInteger)messageId completionHandler:(void (^ _Nonnull)(NSError * _Nullable))completionHandler;
/// <ul>
///   <li>
///     ~chinese
///   </li>
///   <li>
///     清空多组会话的消息，不会删除会话。
///   </li>
///   <li>
///   </li>
/// </ul>
- (void)clearMessagesOfConversations:(NSArray<NSNumber *> * _Nonnull)conversationIds clearServerData:(BOOL)clearServerData completionHandler:(void (^ _Nonnull)(NSError * _Nullable))completionHandler;
/// ~chinese
/// 清空所有会话及其消息。
/// 异步方法。
/// @param clearSeverData 是否删除服务端所有会话及其消息：
/// - YES：是。服务端的所有会话及其消息会被清除，当前用户无法再从服务端拉取消息和会话，其他用户不受影响。
/// - （默认）NO：否。只清除本地所有会话及其消息，服务端的会话及其消息仍保留。
/// @param aCompletionBlock 该方法完成调用的回调。如果该方法调用失败，会包含调用失败的原因。
/// ~english
/// Clears all conversations and all messages in them.
/// This is an asynchronous method.
/// @param clearSeverData Whether to clear all conversations and all messages in them on the server.
/// <ul>
///   <li>
///     YES：Yes. All conversations and all messages in them will be cleared on the server side.
///     The current user cannot retrieve messages and conversations from the server, while this has no impact on other users.
///   </li>
///   <li>
///     (Default) NO：No. All local conversations and all messages in them will be cleared, while those on the server remain.
///     @param aCompletionBlock The completion callback, which contains the description of the cause to the failure.
///   </li>
/// </ul>
- (void)deleteAllMessagesAndConversations:(BOOL)clearServerData completionHandler:(void (^ _Nonnull)(NSError * _Nullable))completionHandler;
/// ~chinese
/// 获取所有会话的缓存信息。
/// @return 所有会话的缓存信息。
/// ~english
/// Get the cache info of all conversations.
/// @return The cache info of all conversations.
- (NSArray<ACConversationCacheInfo *> * _Nonnull)getAllConversationCacheInfo SWIFT_WARN_UNUSED_RESULT;
@end

/// ~chinese
/// @header ACPushManager.swift
/// @abstract 推送相关的管理协议类。
/// @author ACIMLib
/// @version 1.0
/// ~english
/// @header ACPushManager.swift
/// @abstract The push related management protocol class.
/// @author ACIMLib
/// @version 1.0
SWIFT_PROTOCOL("_TtP7ACIMLib14IACPushManager_")
@protocol IACPushManager <NSObject>
/// ~chinese
/// 设置会话消息免打扰数据。
/// @param aConversationId 会话Id。
/// @param aConversationType 会话类型。
/// @param remindType 免打扰数据参数模型，详见ACPushRemindType。
/// @param aCompletionBlock
/// 该方法完成调用的回调。如果该方法调用失败，会包含调用失败的原因。
/// ~english
/// Set conversation silent mode  message data.
/// @param aConversationId  The conversation Id.
/// @param aConversationType  The conversation type.
/// @param aParam Silent mode data parameter model ,See ACSilentModeParam.
/// @param aCompletionBlock  The completion block, which contains the error message if the method fails.
- (void)setSilentModeForConversation:(NSInteger)aConversationId conversationType:(enum ACConversationType)conversationType remindType:(enum ACPushRemindType)remindType completionHandler:(void (^ _Nonnull)(ACSilentModeResult * _Nullable, NSError * _Nullable))completionHandler;
@end

@class UIImage;
SWIFT_CLASS("_TtC7ACIMLib12ImageMessage")
@interface ImageMessage : MediaMessageContent
@property (nonatomic) BOOL full;
@property (nonatomic, copy) NSString * _Nonnull extension;
@property (nonatomic, copy) NSString * _Nonnull originalObjectKey;
@property (nonatomic, copy) NSString * _Nonnull thumbnailObjectKey;
@property (nonatomic) NSInteger width;
@property (nonatomic) NSInteger height;
@property (nonatomic, copy) NSString * _Nullable encryptKey;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithOriginalImageData:(NSData * _Nullable)originalImageData image:(UIImage * _Nonnull)image OBJC_DESIGNATED_INITIALIZER;
+ (enum MessagePersistent)persistentFlag SWIFT_WARN_UNUSED_RESULT;
+ (NSInteger)getConstructor SWIFT_WARN_UNUSED_RESULT;
- (NSArray<NSString *> * _Nonnull)getImageKeys SWIFT_WARN_UNUSED_RESULT;
@end

SWIFT_CLASS("_TtC7ACIMLib11LinkMessage")
@interface LinkMessage : MessageContent
@property (nonatomic, copy) NSString * _Nonnull url;
@property (nonatomic, copy) NSString * _Nullable title;
@property (nonatomic, copy) NSString * _Nullable content;
+ (NSInteger)getConstructor SWIFT_WARN_UNUSED_RESULT;
+ (enum MessagePersistent)persistentFlag SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

SWIFT_CLASS("_TtC7ACIMLib15LocationMessage")
@interface LocationMessage : MediaMessageContent
@property (nonatomic, copy) NSString * _Nonnull thumbnailObjectKey;
@property (nonatomic, copy) NSString * _Nonnull title;
@property (nonatomic, copy) NSString * _Nonnull desc;
@property (nonatomic) NSInteger locationType;
@property (nonatomic, copy) NSString * _Nullable encryptKey;
@property (nonatomic) double lat;
@property (nonatomic) double lon;
@property (nonatomic, copy) NSString * _Nullable oldThumbnailObjectKey;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithImage:(UIImage * _Nonnull)image OBJC_DESIGNATED_INITIALIZER;
+ (enum MessagePersistent)persistentFlag SWIFT_WARN_UNUSED_RESULT;
+ (NSInteger)getConstructor SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)getSearchableWords SWIFT_WARN_UNUSED_RESULT;
- (NSArray<NSString *> * _Nonnull)getImageKeys SWIFT_WARN_UNUSED_RESULT;
@end

@protocol MessageBriefTextProvider;
/// 消息摘要文本工厂类
SWIFT_CLASS("_TtC7ACIMLib23MessageBriefTextFactory")
@interface MessageBriefTextFactory : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) MessageBriefTextFactory * _Nonnull shared;)
+ (MessageBriefTextFactory * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// 注册消息摘要文本提供者
- (void)registerWithProvider:(id <MessageBriefTextProvider> _Nonnull)provider for:(NSInteger)messageType;
/// 移除指定消息类型的摘要文本提供者
- (void)unregisterProviderFor:(NSInteger)messageType;
/// 为消息内容生成摘要文本（仅处理 ACIMLib 内部消息类型）
- (NSString * _Nullable)briefTextFor:(MessageContent * _Nonnull)content SWIFT_WARN_UNUSED_RESULT;
/// 清除所有自定义提供者
- (void)clearAllProviders;
@end

/// 消息摘要文本提供者协议
SWIFT_PROTOCOL("_TtP7ACIMLib24MessageBriefTextProvider_")
@protocol MessageBriefTextProvider <NSObject>
/// 为指定消息内容生成摘要文本
/// \param content 消息内容对象
///
///
/// returns:
/// 摘要文本，如果无法处理则返回 nil
- (NSString * _Nullable)briefTextFor:(MessageContent * _Nonnull)content SWIFT_WARN_UNUSED_RESULT;
@end

typedef SWIFT_ENUM(NSInteger, MessagePersistent, open) {
  MessagePersistentNone = 0,
  MessagePersistentIsPersisted = 1,
  MessagePersistentIsCounted = 3,
  MessagePersistentStatus = 16,
};

SWIFT_CLASS("_TtC7ACIMLib26MessageTextLinkPreviewInfo")
@interface MessageTextLinkPreviewInfo : NSObject
@property (nonatomic, copy) NSString * _Nonnull url;
@property (nonatomic, copy) NSString * _Nullable domain;
@property (nonatomic, copy) NSString * _Nullable title;
@property (nonatomic, copy) NSString * _Nullable previewDescription;
@property (nonatomic) NSInteger width;
@property (nonatomic) NSInteger height;
@property (nonatomic, copy) NSString * _Nullable encryptKey;
@property (nonatomic, copy) NSString * _Nullable originalObjectKey;
@property (nonatomic, copy) NSString * _Nullable oldOriginalObjectKey;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithImageData:(NSData * _Nullable)imageData OBJC_DESIGNATED_INITIALIZER;
@end

SWIFT_CLASS("_TtC7ACIMLib12MessageTypes")
@interface MessageTypes : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger text;)
+ (NSInteger)text SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger image;)
+ (NSInteger)image SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger video;)
+ (NSInteger)video SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger gif;)
+ (NSInteger)gif SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger audio;)
+ (NSInteger)audio SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger location;)
+ (NSInteger)location SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger file;)
+ (NSInteger)file SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger redPacket;)
+ (NSInteger)redPacket SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger transfer;)
+ (NSInteger)transfer SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger combine;)
+ (NSInteger)combine SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger link;)
+ (NSInteger)link SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger contact;)
+ (NSInteger)contact SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger groupInvitation;)
+ (NSInteger)groupInvitation SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger walletService;)
+ (NSInteger)walletService SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger privateRecallNoti;)
+ (NSInteger)privateRecallNoti SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger addFriendNoti;)
+ (NSInteger)addFriendNoti SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger addFriendV2Noti;)
+ (NSInteger)addFriendV2Noti SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger groupRecallNoti;)
+ (NSInteger)groupRecallNoti SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger userApplyAddGroupNoti;)
+ (NSInteger)userApplyAddGroupNoti SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger turnOnPrivatechatBurnAfterReadingNoti;)
+ (NSInteger)turnOnPrivatechatBurnAfterReadingNoti SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger turnOffPrivateChatBurnAfterReadingNoti;)
+ (NSInteger)turnOffPrivateChatBurnAfterReadingNoti SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger updateGroupChatTitleNoti;)
+ (NSInteger)updateGroupChatTitleNoti SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger addGroupMemberNoti;)
+ (NSInteger)addGroupMemberNoti SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger removeGroupMemberNoti;)
+ (NSInteger)removeGroupMemberNoti SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger addGroupAdminNoti;)
+ (NSInteger)addGroupAdminNoti SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger deleteGroupAdminNoti;)
+ (NSInteger)deleteGroupAdminNoti SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger kickedOutGroupNoti;)
+ (NSInteger)kickedOutGroupNoti SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger turnOnPrivateChatTakeScreenshotNoti;)
+ (NSInteger)turnOnPrivateChatTakeScreenshotNoti SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger turnOnGroupMessageLifetimeNoti;)
+ (NSInteger)turnOnGroupMessageLifetimeNoti SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger turnOffGroupMessageLifetimeNoti;)
+ (NSInteger)turnOffGroupMessageLifetimeNoti SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger updateGroupChatPhotoNotification;)
+ (NSInteger)updateGroupChatPhotoNotification SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger redPacketlNoti;)
+ (NSInteger)redPacketlNoti SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger updateGroupNoticeNoti;)
+ (NSInteger)updateGroupNoticeNoti SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger turnOnPrivateScreenShotNoti;)
+ (NSInteger)turnOnPrivateScreenShotNoti SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger turnOffPrivateScreenShotNoti;)
+ (NSInteger)turnOffPrivateScreenShotNoti SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger turnOnGroupScreenShotNoti;)
+ (NSInteger)turnOnGroupScreenShotNoti SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger turnOffGroupScreenShotNoti;)
+ (NSInteger)turnOffGroupScreenShotNoti SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger privateChatScreenShotNoti;)
+ (NSInteger)privateChatScreenShotNoti SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger groupChatScreenShotNoti;)
+ (NSInteger)groupChatScreenShotNoti SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger groupMemberMuteNoti;)
+ (NSInteger)groupMemberMuteNoti SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger activitySharing;)
+ (NSInteger)activitySharing SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger openPrivateChatBurnAfterReadingNoti;)
+ (NSInteger)openPrivateChatBurnAfterReadingNoti SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger closePrivateChatBurnAfterReadingNoti;)
+ (NSInteger)closePrivateChatBurnAfterReadingNoti SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger openGroupChatBurnAfterReadingNoti;)
+ (NSInteger)openGroupChatBurnAfterReadingNoti SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger closeGroupChatBurnAfterReadingNoti;)
+ (NSInteger)closeGroupChatBurnAfterReadingNoti SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger voicePushClosedNoti;)
+ (NSInteger)voicePushClosedNoti SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger systemTemplateTwo;)
+ (NSInteger)systemTemplateTwo SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger systemTemplateThree;)
+ (NSInteger)systemTemplateThree SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger welcomeNoti;)
+ (NSInteger)welcomeNoti SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger deviceChangedNoti;)
+ (NSInteger)deviceChangedNoti SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger audioNoti;)
+ (NSInteger)audioNoti SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger dateNoti;)
+ (NSInteger)dateNoti SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger unreadNoti;)
+ (NSInteger)unreadNoti SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger newFriendNoti;)
+ (NSInteger)newFriendNoti SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger encryptionNoti;)
+ (NSInteger)encryptionNoti SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger chatRejected;)
+ (NSInteger)chatRejected SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger unidentified;)
+ (NSInteger)unidentified SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

SWIFT_CLASS("_TtC7ACIMLib9OssConfig")
@interface OssConfig : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, OssError, open) {
  OssErrorInitializeServiceFailed = 0,
  OssErrorSignFailed = 1,
  OssErrorAccessDenied = 2,
  OssErrorNetworkError = 3,
  OssErrorNotExist = 4,
  OssErrorInvalidArgument = 5,
  OssErrorTaskCancelled = 6,
  OssErrorEncryptFailed = 7,
  OssErrorUnknown = 8,
};
static NSString * _Nonnull const OssErrorDomain = @"ACIMLib.OssError";

SWIFT_CLASS("_TtC7ACIMLib10OssManager")
@interface OssManager : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) OssManager * _Nonnull shared;)
+ (OssManager * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (void)uploadMultipleAvatarsWithKeys:(NSArray<NSString *> * _Nonnull)keys filePaths:(NSArray<NSString *> * _Nonnull)filePaths completionHandler:(void (^ _Nonnull)(NSError * _Nullable))completionHandler;
- (NSString * _Nonnull)base_generateObjectKeyWithExt:(NSString * _Nullable)ext SWIFT_WARN_UNUSED_RESULT;
@end

SWIFT_CLASS("_TtC7ACIMLib8OssModel")
@interface OssModel : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

SWIFT_CLASS("_TtC7ACIMLib36RecallMessageNotificationBaseMessage")
@interface RecallMessageNotificationBaseMessage : NotificationMessage
@property (nonatomic) NSInteger templateId;
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull params;
@property (nonatomic) NSInteger msgId;
@property (nonatomic) NSInteger originalMediaConstructor;
@property (nonatomic, copy) NSString * _Nullable recallContent;
@property (nonatomic) NSInteger operatorUserId;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

SWIFT_CLASS("_TtC7ACIMLib41RecallGroupChatMessageNotificationMessage")
@interface RecallGroupChatMessageNotificationMessage : RecallMessageNotificationBaseMessage
@property (nonatomic) NSInteger groupId;
+ (NSInteger)getConstructor SWIFT_WARN_UNUSED_RESULT;
- (void)processForMessageWithMessage:(ACChatMessage * _Nonnull)message;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

SWIFT_CLASS("_TtC7ACIMLib43RecallPrivateChatMessageNotificationMessage")
@interface RecallPrivateChatMessageNotificationMessage : RecallMessageNotificationBaseMessage
+ (NSInteger)getConstructor SWIFT_WARN_UNUSED_RESULT;
- (void)processForMessageWithMessage:(ACChatMessage * _Nonnull)message;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, ReceivedStatus, open) {
  ReceivedStatusUnreceived = 0,
  ReceivedStatusNoneLeft = 1,
  ReceivedStatusReceived = 2,
  ReceivedStatusExpired = 3,
};

SWIFT_CLASS("_TtC7ACIMLib16RedPacketMessage")
@interface RedPacketMessage : MessageContent
@property (nonatomic) NSInteger id;
@property (nonatomic, copy) NSString * _Nonnull createTime;
@property (nonatomic, copy) NSString * _Nonnull updateTime;
@property (nonatomic, copy) NSString * _Nonnull amount;
@property (nonatomic) NSInteger count;
@property (nonatomic) NSInteger uid;
@property (nonatomic) NSInteger nativeNumber;
@property (nonatomic) NSInteger nativeType;
@property (nonatomic, copy) NSString * _Nonnull sendSign;
@property (nonatomic, copy) NSString * _Nonnull title;
@property (nonatomic, copy) NSString * _Nonnull symbol;
@property (nonatomic) enum ReceivedStatus receivedStatus;
@property (nonatomic) NSInteger status;
@property (nonatomic) NSInteger expireTime;
@property (nonatomic, copy) NSString * _Nonnull currency;
@property (nonatomic, copy) NSString * _Nonnull currencyLogo;
@property (nonatomic, copy) NSString * _Nonnull refundAmount;
@property (nonatomic, copy) NSString * _Nullable receivedAmout;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
+ (NSInteger)getConstructor SWIFT_WARN_UNUSED_RESULT;
+ (enum MessagePersistent)persistentFlag SWIFT_WARN_UNUSED_RESULT;
@end

SWIFT_CLASS("_TtC7ACIMLib45ScreenShotSwitchChangeNotificationBaseMessage")
@interface ScreenShotSwitchChangeNotificationBaseMessage : NotificationMessage
@property (nonatomic) NSInteger templateId;
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull params;
@property (nonatomic) NSInteger operatorUserId;
@property (nonatomic) NSInteger groupUin;
@property (nonatomic) NSInteger destUin;
+ (enum MessagePersistent)persistentFlag SWIFT_WARN_UNUSED_RESULT;
- (void)processForMessageWithMessage:(ACChatMessage * _Nonnull)message;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

SWIFT_CLASS("_TtC7ACIMLib10ServerTime")
@interface ServerTime : NSObject
+ (NSInteger)getServerMSTime SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

SWIFT_CLASS("_TtC7ACIMLib11TextMessage")
@interface TextMessage : MediaMessageContent
@property (nonatomic, copy) NSArray<AtInfo *> * _Nonnull atInfo;
@property (nonatomic, copy) NSArray<ChatTextStyleAttribute *> * _Nonnull attributes;
@property (nonatomic, strong) MessageTextLinkPreviewInfo * _Nullable linkPreview;
@property (nonatomic, copy) NSString * _Nonnull text;
+ (NSInteger)getConstructor SWIFT_WARN_UNUSED_RESULT;
+ (enum MessagePersistent)persistentFlag SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)mediaFlag SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)getContentBriefText SWIFT_WARN_UNUSED_RESULT;
- (NSArray<NSString *> * _Nonnull)getImageKeys SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

SWIFT_CLASS("_TtC7ACIMLib15TransferMessage")
@interface TransferMessage : MessageContent
@property (nonatomic) NSInteger id;
@property (nonatomic, copy) NSString * _Nonnull createTime;
@property (nonatomic, copy) NSString * _Nonnull updateTime;
@property (nonatomic, copy) NSString * _Nonnull uid;
@property (nonatomic, copy) NSString * _Nonnull orderId;
@property (nonatomic, copy) NSString * _Nonnull src;
@property (nonatomic, copy) NSString * _Nonnull symbol;
@property (nonatomic) NSInteger type;
@property (nonatomic, copy) NSString * _Nonnull toUid;
@property (nonatomic, copy) NSString * _Nonnull toName;
@property (nonatomic) NSInteger nativeType;
@property (nonatomic, copy) NSString * _Nonnull money;
@property (nonatomic, copy) NSString * _Nonnull moneyStr;
@property (nonatomic, copy) NSString * _Nonnull refName;
@property (nonatomic, copy) NSString * _Nonnull transNo;
@property (nonatomic) NSInteger status;
@property (nonatomic) NSInteger pushStatus;
@property (nonatomic, copy) NSString * _Nonnull currency;
@property (nonatomic, copy) NSString * _Nonnull currencyLogo;
@property (nonatomic, copy) NSString * _Nonnull network;
@property (nonatomic, copy) NSString * _Nonnull networkLogo;
@property (nonatomic, copy) NSString * _Nonnull refId;
@property (nonatomic) NSInteger currencyType;
@property (nonatomic, copy) NSString * _Nonnull remarkStr;
- (NSString * _Nonnull)getMoneyText SWIFT_WARN_UNUSED_RESULT;
+ (NSInteger)getConstructor SWIFT_WARN_UNUSED_RESULT;
+ (enum MessagePersistent)persistentFlag SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

SWIFT_CLASS("_TtC7ACIMLib46TurnOffGroupMessageLifetimeNotificationMessage")
@interface TurnOffGroupMessageLifetimeNotificationMessage : NotificationMessage
@property (nonatomic) NSInteger templateId;
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull params;
@property (nonatomic) NSInteger operatorUserId;
@property (nonatomic) NSInteger destUin;
+ (NSInteger)getConstructor SWIFT_WARN_UNUSED_RESULT;
- (void)processForMessageWithMessage:(ACChatMessage * _Nonnull)message;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

SWIFT_CLASS("_TtC7ACIMLib45TurnOnGroupMessageLifetimeNotificationMessage")
@interface TurnOnGroupMessageLifetimeNotificationMessage : NotificationMessage
@property (nonatomic) NSInteger templateId;
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull params;
@property (nonatomic) NSInteger operatorUserId;
@property (nonatomic) NSInteger destUin;
+ (NSInteger)getConstructor SWIFT_WARN_UNUSED_RESULT;
- (void)processForMessageWithMessage:(ACChatMessage * _Nonnull)message;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

SWIFT_CLASS("_TtC7ACIMLib19UnidentifiedMessage")
@interface UnidentifiedMessage : MessageContent
+ (NSInteger)getConstructor SWIFT_WARN_UNUSED_RESULT;
+ (enum MessagePersistent)persistentFlag SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)mediaFlag SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

SWIFT_CLASS("_TtC7ACIMLib12VideoMessage")
@interface VideoMessage : MediaMessageContent
@property (nonatomic, copy) NSString * _Nonnull during;
@property (nonatomic, copy) NSString * _Nonnull videoObjectKey;
@property (nonatomic, copy) NSString * _Nonnull thumbnailObjectKey;
@property (nonatomic, copy) NSString * _Nonnull extension;
@property (nonatomic, copy) NSString * _Nullable encryptKey;
@property (nonatomic) NSInteger width;
@property (nonatomic) NSInteger height;
@property (nonatomic) BOOL uncompressed;
@property (nonatomic, copy) NSString * _Nullable oldVideoObjectKey;
@property (nonatomic, copy) NSString * _Nullable oldThumbnailObjectKey;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
+ (enum MessagePersistent)persistentFlag SWIFT_WARN_UNUSED_RESULT;
+ (NSInteger)getConstructor SWIFT_WARN_UNUSED_RESULT;
- (NSArray<NSString *> * _Nonnull)getImageKeys SWIFT_WARN_UNUSED_RESULT;
- (NSArray<NSString *> * _Nonnull)getFileKeys SWIFT_WARN_UNUSED_RESULT;
@end

#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
